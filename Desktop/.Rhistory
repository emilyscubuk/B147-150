# An introduction to R ----
#########################################
# Lesson 4 - Reading and writing data
# last updated 25/02/2017
#########################################
# Clean R environment ----
rm(list=ls())
myData <- read.table(file= "datafile.txt")
getwd()
myData <- read.table(file= "/Users/sibel/Downloads"")
myData<- read.csv(file = "datafile.csv")
# Error in file(file, "rt") : cannot open the connection
# In addition: Warning message:
# In file(file, "rt") :
#   cannot open file 'datafile.csv': No such file or directory
# Set directory to the folder in which you stored the file you want to import
setwd("C:/course/Math 5320/Lesson 4")
# Check out how read.csv() works
?read.csv
#######################################################################################
# Missing values ----
v <- c(1, 3, NA, 5)
is.na(v)
# [1] FALSE FALSE  TRUE FALSE
mean(v) # R cannot calculate mean
# [1] NA
mean(v, na.rm = TRUE) # R does not consider missing values when calculating mean
# [1] 3
#######################################################################################
# Checking and cleaning data ----
# Example using sample data set from http://environmentalcomputing.net
# Set directory to folder in wich you stored the "Snail_feeding.csv" file
setwd("~/Desktop")
# Import the sample data
my_data<- read.csv(file = "C:/course/Math 5320/Lesson 4/Snail_feeding.csv", header = T, strip.white = T, na.strings = "")
str(my_data)
# Example using sample data set from https://environmentalcomputing.net
snail_Data<- read.csv(file = "https://environmentalcomputing.net/datasets/Snail_feeding.csv",
header = T, strip.white = T, na.strings = "")
# Use the str() function to check variables
str(snail_Data)
# 'data.frame':	769 obs. of  10 variables:
# $ Snail.ID: int  1 1 1 1 1 1 1 1 1 1 ...
# $ Sex     : Factor w/ 4 levels "female","male",..: 2 2 4 2 2 2 2 2 2 2 ...
# $ Size    : Factor w/ 2 levels "large","small": 2 2 2 2 2 2 2 2 2 2 ...
# $ Feeding : logi  FALSE FALSE FALSE FALSE FALSE TRUE ...
# $ Distance: num  0.17 0.87 0.22 0.13 0.36 0.84 0.69 0.6 0.85 0.59 ...
# $ Depth   : num  1.66 1.26 1.43 1.46 1.21 1.56 1.62 162 1.96 1.93 ...
# $ Temp    : int  21 21 18 19 21 21 20 20 19 19 ...
# $ X       : logi  NA NA NA NA NA NA ...
# $ X.1     : logi  NA NA NA NA NA NA ...
# $ X.2     : logi  NA NA NA NA NA NA ...
# Get rid of these extra columns by indexing Snail_data[m, n]
#############################################################
Snail_data <- Snail_data[ , 1:7]   		 # takes column 1 to 7
str(Snail_data)
# 'data.frame':	768 obs. of  7 variables:
#  $ Snail.ID: int  1 1 1 1 1 1 1 1 1 1 ...
#  $ Sex     : Factor w/ 5 levels "female","female s",..: 3 3 5 3 3 3 3 3 3 3 ...
#  $ Size    : Factor w/ 2 levels "large","small": 2 2 2 2 2 2 2 2 2 2 ...
#  $ Feeding : logi  FALSE FALSE FALSE FALSE FALSE TRUE ...
#  $ Distance: Factor w/ 104 levels "0","0,356452",..: 19 91 24 15 38 88 73 64 89 63 ...
#  $ Depth   : num  1.66 1.26 1.43 1.46 1.21 1.56 1.62 162 1.96 1.93 ...
#  $ Temp    : int  21 21 18 19 21 21 20 20 19 19 ...
# Check the levels of a factor or character using unique()
##########################################################
unique(Snail_data$Sex)
# [1] male   males  Male   female
# Levels: female male Male males
levels(Snail_data$Sex) # does the same job
# "female" "male"   "Male"   "males"
# To turn ????omales????? or ????oMale????? into ????omale????? use the [ ]-Operator and which()
########################################################################
Snail_data$Sex[which(Snail_data$Sex == "males")] <- "male"
Snail_data$Sex[which(Snail_data$Sex == "Male")] <- "male"
# Or in one go
Snail_data$Sex[which(Snail_data$Sex == "males" | Snail_data$Sex == "Male")] <- "male"
# Check if it worked using unique()
###################################
unique(Snail_data$Sex)
# [1] male   female
# Levels: female male Male males      # still 4 levels
# You can remove the extra levels using factor()
################################################
Snail_data$Sex <- factor(Snail_data$Sex)
unique(Snail_data$Sex)
# [1] male   female
# Levels: female male
# Use the summary() function to show summary statistics for each variable
#########################################################################
summary(Snail_data)
# Snail.ID         Sex         Size      Feeding           Distance
# Min.   : 1.00   female:384   large:383   Mode :logical   Min.   :0.0000
# 1st Qu.: 4.00   male  :385   small:385   FALSE:503       1st Qu.:0.2800
# Median : 8.50                NA's :  1   TRUE :266       Median :0.5100
# Mean   : 8.49                            NA's :0         Mean   :0.5125
# 3rd Qu.:12.00                                            3rd Qu.:0.7500
# Max.   :16.00                                            Max.   :1.0000
#
# Depth              Temp
# Min.   :  1.000   Min.   :18.00
# 1st Qu.:  1.260   1st Qu.:19.00
# Median :  1.510   Median :19.00
# Mean   :  1.716   Mean   :19.49
# 3rd Qu.:  1.760   3rd Qu.:20.00
# Max.   :162.000   Max.   :21.00
# NA's   :6
# To find depth greater than 2m use the [ ]-Operator and which()
################################################################
Snail_data[which(Snail_data$Depth > 2), ]
#   Snail.ID  Sex  Size Feeding Distance Depth Temp
# 8        1 male small    TRUE      0.6   162   20
# Replace value
###############
Snail_data[8, 6]
# [1] 162
Snail_data[8, 6] <- 1.62
Snail_data[8, 6]
# [1] 1.62
# Check for dublicate observations
##################################
duplicated(Snail_data)
# [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
# [15] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
# [29] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
# [43] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
# ...
# ...               # Cut to reduce space
# ...
# duplicated() shows that the 17th row is a duplicate of an earlier row
# Remove duplicate rows
######################
# Use duplicated()
Snail_data<- Snail_data[!duplicated(Snail_data), ]
# Or use unique()
Snail_data<- unique(Snail_data)
# Double-check for dublicates
#############################
duplicated(Snail_data)
# [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
# [15] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
# [29] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
# [43] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
# ...
# ...               # Cut to reduce space
# ...
# Find duplicates using which() and duplicated()
################################################
Snail_data[which(duplicated(Snail_data)), ]  # is much faster than scanning all rows for TRUE
#     Snail.ID  Sex  Size Feeding Distance Depth Temp  X X.1 X.2
# 17        1   male small   FALSE     0.87  1.95   18 NA  NA  NA
# Sorting your data
##################
# Sorting single vectors
sort(Snail_data$Depth)
# [1] 1.00 1.00 1.00 1.00 1.00 1.01 1.01 1.01 1.01 1.01 1.02 1.02 1.02 1.02 1.02 1.02 1.03
# [18] 1.03 1.03 1.03 1.03 1.03 1.03 1.03 1.03 1.03 1.03 1.04 1.04 1.04 1.04 1.04 1.05 1.05
# [35] 1.05 1.05 1.05 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.06 1.07 1.07 1.07 1.07 1.07 1.07
# [52] 1.07 1.07 1.07 1.08 1.08 1.08 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09 1.09
# ...
# ...               # Cut to reduce space
# ...
# Sorting dataframes
Snail_data[order(Snail_data$Depth, Snail_data$Temp), ]
#     Snail.ID   Sex  Size   Feeding Distance Depth Temp
# 494       11 female small   FALSE  0.76000  1.00   18
# 607       13 female large   FALSE  0.45000  1.00   18
# 86         2   male small   FALSE  0.09000  1.00   19
# 239        5   male large    TRUE  0.03000  1.00   20
# 511       11 female small    TRUE  0.62000  1.00   21
# 620       13 female large    TRUE  0.49000  1.01   18
# ...               # Cut to reduce space
# Decreasing order
Snail_data[order(Snail_data$Depth, Snail_data$Temp, decreasing=TRUE), ]
#      Snail.ID  Sex  Size   Feeding Distance Depth Temp
# 762       16 female large   FALSE  0.92000  2.00   21
# 412        9 female small    TRUE  0.48000  2.00   19
# 37         1   male small   FALSE  0.67000  2.00   18
# 155        4   male small   FALSE  0.38000  2.00   18
# 434       10 female small   FALSE  0.49000  2.00   18
# 644       14 female large   FALSE  0.79000  1.99   21
# Show only first or last parts of an object: head() or tail()
###############################################################
head(Snail_data, n = 4) # returns first 4 rows of Snail_data
#   Snail.ID  Sex  Size Feeding Distance Depth Temp
# 1        1 male small   FALSE     0.17  1.66   21
# 2        1 male small   FALSE     0.87  1.26   21
# 3        1 male small   FALSE     0.22  1.43   18
# 4        1 male small   FALSE     0.13  1.46   19
tail(Snail_data, n = 4) # returns last 4 rows of Snail_data
#     Snail.ID    Sex  Size Feeding Distance Depth Temp
# 766       16 female large    TRUE  0.65000  1.71   20
# 767       16 female large    TRUE  0.46000  1.27   19
# 768       16 female large   FALSE  0.36000  1.28   21
# 769       16 female large   FALSE  0.42336  1.82   19
# head() and order() combined
head(Snail_data[order(Snail_data$Depth),], n=10)  # returns first 10 rows of Snail_data with increasing depth
#      Snail.ID Sex  Size Feeding Distance Depth Temp
# 86         2   male small   FALSE     0.09  1.00   19
# 239        5   male large    TRUE     0.03  1.00   20
# 494       11 female small   FALSE     0.76  1.00   18
# 511       11 female small    TRUE     0.62  1.00   21
# 607       13 female large   FALSE     0.45  1.00   18
# 224        5   male large   FALSE     0.83  1.01   20
# 274        6   male large   FALSE     0.20  1.01   20
# 422        9 female small   FALSE     0.40  1.01   20
# 618       13 female large   FALSE     0.05  1.01   20
# 620       13 female large    TRUE     0.49  1.01   18
#######################################################################################
# Export data ----
?write.table # Check out how function works
write.csv(Snail_data, file = "Snail_data_checked.csv", row.names = FALSE)
########################################################################################
# Clean R environment and quit R ----
rm(list=ls()) # will remove all objects from the memory
# You can then either end R by closing the R studio console or typing q()
q()
DF=data.frame(airquality[,4:6])  #data frame of last 3 columns
DF
DF$Day <- as.factor(DF$Day)
print(DF$Day)
DF$Month <- as.factor(DF$Month)
print(DF$Month)
str(DF)   #Here we can see the last two variables are now Factors
for(i in c(2,3)){
DF[,i] = as.factor(DF[,i])
}
str(DF)
DF$Day <- as.factor(DF$Day)
print(DF$Day)
DF$Month <- as.factor(DF$Month)
print(DF$Month)
str(DF)   #Here we can see the last two variables are now Factors
attach(TMD)
TMD = data.frame(airquality[,4:6])  #data frame of last 3 columns
#and storing it as TMD
TMD
attach(TMD)
Day[11] #now call you can a single variable to display the 11th component
detach(TMD)
TMD$Day[11] #now you must specify the data frame to call the
seq(0, pi, length = 11)
seq(0, pi, by = pi/10)
data("airquality")
class(airquality)      #This tells us the type of data is a data frame
attributes(airquality) #This also tells us it is a data frame and
?airquality            #This tells us more info about the data set
variable.names(airquality) #The variable names can be found this way as well
str(airquality)        #This shows the type of each variable(int and num)
TMD = data.frame(airquality[,4:6])  #data frame of last 3 columns
#and storing it as TMD
TMD
attach(TMD)
Day[11] #now call you can a single variable to display the 11th component
detach(TMD)
TMD$Day[11] #now you must specify the data frame to call the
#using a for loop to convert the columns
for(i in c(2,3)){
TMD[,i] = as.factor(TMD[,i])
}
str(TMD) #Here we can see the last two variables are now Factors
seqvec = rep(1:6, 5)
seqvec
matrix(seqvec, 5, 6, TRUE)
matrix((seqvec = rep(1:6,5)), 5, 6, TRUE)
#df = data frame
#x = variable 1
#y = variable 2
#z = variable 3
four = function(df,x,y,z) {
attach(df)
par(mfrow=c(2,2),mai=c(.75, .75, .75, .75),las=1)
plot(x,y, main="Plot 1" , col="gold")
abline(lm(y ~ x, data = df))
plot(x,z, main="Plot 2", col= "salmon")
abline(lm(z ~ x, data = df))
hist(x, main="Histogram", col= "palegreen" )
d = density(y, bw=1)
plot(d, main = "Density")
polygon(d, col= "cornflowerblue")
}
four(mtcars,hp,mpg,cyl)
four(iris,Petal.Length,Petal.Width,Sepal.Width)
#This function will take in a data set and output the mean of each column
#na.rm will remove any missing values
meanchart = function(df) {
x=ncol(df)
for(i in c(1:x)){
df[,i] = as.numeric(df[,i])
}
apply(df, 2, mean, na.rm = TRUE)
}
meanchart(iris)
